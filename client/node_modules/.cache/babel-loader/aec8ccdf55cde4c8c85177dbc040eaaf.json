{"ast":null,"code":"import { useReducer } from \"react\";\nimport { server } from \"./server\";\n\nconst reducer = () => (state, action) => {\n  switch (action.type) {\n    case \"FETCH\":\n      return { ...state,\n        loading: true\n      };\n\n    case \"FETCH_SUCCESS\":\n      return {\n        data: action.payload,\n        loading: false,\n        error: false\n      };\n\n    case \"FETCH_ERROR\":\n      return { ...state,\n        loading: false,\n        error: true\n      };\n\n    default:\n      throw new Error();\n  }\n};\n\nexport const useMutation = query => {\n  const fetchReducer = reducer();\n  const [state, dispatch] = useReducer(fetchReducer, {\n    data: null,\n    loading: false,\n    error: false\n  }); // const [state, setState] = useState<State<TData>>({\n  //   data: null,\n  //   loading: false,\n  //   error: false,\n  // });\n\n  const fetch = async variables => {\n    try {\n      // setState({ data: null, loading: true, error: false });\n      const {\n        data,\n        errors\n      } = await server.fetch({\n        query,\n        variables\n      });\n\n      if (errors && errors.length) {\n        throw new Error(errors[0].message);\n      }\n\n      setState({\n        data: data,\n        loading: false,\n        error: false\n      });\n    } catch (err) {\n      setState({\n        data: null,\n        loading: false,\n        error: true\n      });\n      console.error(err);\n    }\n  };\n\n  return [fetch, state];\n};","map":{"version":3,"sources":["/Users/rubencastroespinoza/Development/Learning /TinyHouseV1/client/src/lib/api/useMutation.ts"],"names":["useReducer","server","reducer","state","action","type","loading","data","payload","error","Error","useMutation","query","fetchReducer","dispatch","fetch","variables","errors","length","message","setState","err","console"],"mappings":"AAAA,SAAmBA,UAAnB,QAAqC,OAArC;AACA,SAASC,MAAT,QAAuB,UAAvB;;AAkBE,MAAMC,OAAO,GAAG,MAAa,CAC3BC,KAD2B,EAE3BC,MAF2B,KAGV;AACjB,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,OAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAYG,QAAAA,OAAO,EAAE;AAArB,OAAP;;AACF,SAAK,eAAL;AACE,aAAO;AAAEC,QAAAA,IAAI,EAAEH,MAAM,CAACI,OAAf;AAAwBF,QAAAA,OAAO,EAAE,KAAjC;AAAwCG,QAAAA,KAAK,EAAE;AAA/C,OAAP;;AACF,SAAK,aAAL;AACE,aAAO,EAAE,GAAGN,KAAL;AAAYG,QAAAA,OAAO,EAAE,KAArB;AAA4BG,QAAAA,KAAK,EAAE;AAAnC,OAAP;;AAEF;AACE,YAAM,IAAIC,KAAJ,EAAN;AATJ;AAWD,CAfD;;AAkBF,OAAO,MAAMC,WAAW,GAAmCC,KAAhC,IAAkF;AAC3G,QAAMC,YAAY,GAAGX,OAAO,EAA5B;AAEA,QAAM,CAACC,KAAD,EAAQW,QAAR,IAAoBd,UAAU,CAACa,YAAD,EAAe;AACjDN,IAAAA,IAAI,EAAE,IAD2C;AAEjDD,IAAAA,OAAO,EAAE,KAFwC;AAGjDG,IAAAA,KAAK,EAAE;AAH0C,GAAf,CAApC,CAH2G,CAS3G;AACA;AACA;AACA;AACA;;AAEA,QAAMM,KAAK,GAAG,MAAOC,SAAP,IAAkC;AAC9C,QAAI;AACF;AAEA,YAAM;AAAET,QAAAA,IAAF;AAAQU,QAAAA;AAAR,UAAmB,MAAMhB,MAAM,CAACc,KAAP,CAAgC;AAC7DH,QAAAA,KAD6D;AAE7DI,QAAAA;AAF6D,OAAhC,CAA/B;;AAKA,UAAIC,MAAM,IAAIA,MAAM,CAACC,MAArB,EAA6B;AAC3B,cAAM,IAAIR,KAAJ,CAAUO,MAAM,CAAC,CAAD,CAAN,CAAUE,OAApB,CAAN;AACD;;AAEDC,MAAAA,QAAQ,CAAC;AAAEb,QAAAA,IAAI,EAAEA,IAAR;AAAcD,QAAAA,OAAO,EAAE,KAAvB;AAA8BG,QAAAA,KAAK,EAAE;AAArC,OAAD,CAAR;AACD,KAbD,CAaE,OAAOY,GAAP,EAAY;AACZD,MAAAA,QAAQ,CAAC;AAAEb,QAAAA,IAAI,EAAE,IAAR;AAAcD,QAAAA,OAAO,EAAE,KAAvB;AAA8BG,QAAAA,KAAK,EAAE;AAArC,OAAD,CAAR;AACAa,MAAAA,OAAO,CAACb,KAAR,CAAcY,GAAd;AACD;AACF,GAlBD;;AAmBA,SAAO,CAACN,KAAD,EAAQZ,KAAR,CAAP;AACD,CAnCM","sourcesContent":["import { useState, useReducer } from \"react\";\nimport { server } from \"./server\";\n\ninterface State<TData> {\n  data: TData | null;\n  loading: boolean;\n  error: boolean;\n}\n\ntype MutationTuple<TData, TVariables> = [\n  (variables?: TVariables | undefined) => Promise<void>,\n  State<TData>\n];\n\ntype Action<TData> =\n  | { type: \"FETCH\" }\n  | { type: \"FETCH_SUCCESS\"; payload: TData }\n  | { type: \"FETCH_ERROR\" };\n\n  const reducer = <TData>() => (\n    state: State<TData>,\n    action: Action<TData>\n  ): State<TData> => {\n    switch (action.type) {\n      case \"FETCH\":\n        return { ...state, loading: true };\n      case \"FETCH_SUCCESS\":\n        return { data: action.payload, loading: false, error: false };\n      case \"FETCH_ERROR\":\n        return { ...state, loading: false, error: true };\n  \n      default:\n        throw new Error();\n    }\n  };\n  \n\nexport const useMutation = <TData = any, TVariables = any>(query: string):MutationTuple<TData,TVariables> => {\n  const fetchReducer = reducer<TData>();\n\n  const [state, dispatch] = useReducer(fetchReducer, {\n    data: null,\n    loading: false,\n    error: false,\n  });\n\n  // const [state, setState] = useState<State<TData>>({\n  //   data: null,\n  //   loading: false,\n  //   error: false,\n  // });\n\n  const fetch = async (variables?: TVariables) => {\n    try {\n      // setState({ data: null, loading: true, error: false });\n\n      const { data, errors } = await server.fetch<TData, TVariables>({\n        query,\n        variables,\n      });\n\n      if (errors && errors.length) {\n        throw new Error(errors[0].message);\n      }\n\n      setState({ data: data, loading: false, error: false });\n    } catch (err) {\n      setState({ data: null, loading: false, error: true });\n      console.error(err);\n    }\n  };\n  return [fetch, state];\n};\n"]},"metadata":{},"sourceType":"module"}