{"ast":null,"code":"import { useState } from \"react\";\nimport { server } from \"./server\";\nexport const useMutation = query => {\n  const [state, setState] = useState({\n    data: null,\n    loading: false,\n    error: false\n  });\n\n  const reducer = () => (state, action) => {\n    switch (action.type) {\n      case \"FETCH\":\n        return { ...state,\n          loading: true\n        };\n\n      case \"FETCH_SUCCESS\":\n        return {\n          data: action.payload,\n          loading: false,\n          error: false\n        };\n\n      case \"FETCH_ERROR\":\n        return { ...state,\n          loading: false,\n          error: true\n        };\n\n      default:\n        throw new Error();\n    }\n  };\n\n  const fetch = async variables => {\n    try {\n      setState({\n        data: null,\n        loading: true,\n        error: false\n      });\n      const {\n        data,\n        errors\n      } = await server.fetch({\n        query,\n        variables\n      });\n\n      if (errors && errors.length) {\n        throw new Error(errors[0].message);\n      }\n\n      setState({\n        data: data,\n        loading: false,\n        error: false\n      });\n    } catch (err) {\n      setState({\n        data: null,\n        loading: false,\n        error: true\n      });\n      console.error(err);\n    }\n  };\n\n  return [fetch, state];\n};","map":{"version":3,"sources":["/Users/rubencastroespinoza/Development/Learning /TinyHouseV1/client/src/lib/api/useMutation.ts"],"names":["useState","server","useMutation","query","state","setState","data","loading","error","reducer","action","type","payload","Error","fetch","variables","errors","length","message","err","console"],"mappings":"AAAA,SAASA,QAAT,QAAqC,OAArC;AACA,SAASC,MAAT,QAAuB,UAAvB;AAYA,OAAO,MAAMC,WAAW,GAAmCC,KAAhC,IAAkF;AAC3G,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAe;AAC/CM,IAAAA,IAAI,EAAE,IADyC;AAE/CC,IAAAA,OAAO,EAAE,KAFsC;AAG/CC,IAAAA,KAAK,EAAE;AAHwC,GAAf,CAAlC;;AAWA,QAAMC,OAAO,GAAG,MAAa,CAC3BL,KAD2B,EAE3BM,MAF2B,KAIV;AACjB,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,OAAL;AACE,eAAO,EAAE,GAAGP,KAAL;AAAYG,UAAAA,OAAO,EAAE;AAArB,SAAP;;AACF,WAAK,eAAL;AACE,eAAO;AAAED,UAAAA,IAAI,EAAEI,MAAM,CAACE,OAAf;AAAwBL,UAAAA,OAAO,EAAE,KAAjC;AAAwCC,UAAAA,KAAK,EAAE;AAA/C,SAAP;;AACF,WAAK,aAAL;AACE,eAAO,EAAE,GAAGJ,KAAL;AAAYG,UAAAA,OAAO,EAAE,KAArB;AAA4BC,UAAAA,KAAK,EAAE;AAAnC,SAAP;;AAEF;AACE,cAAM,IAAIK,KAAJ,EAAN;AATJ;AAWD,GAhBD;;AAmBA,QAAMC,KAAK,GAAG,MAAOC,SAAP,IAAkC;AAC9C,QAAI;AACFV,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,OAAO,EAAE,IAAvB;AAA6BC,QAAAA,KAAK,EAAE;AAApC,OAAD,CAAR;AAEA,YAAM;AAAEF,QAAAA,IAAF;AAAQU,QAAAA;AAAR,UAAmB,MAAMf,MAAM,CAACa,KAAP,CAAgC;AAC7DX,QAAAA,KAD6D;AAE7DY,QAAAA;AAF6D,OAAhC,CAA/B;;AAKA,UAAIC,MAAM,IAAIA,MAAM,CAACC,MAArB,EAA6B;AAC3B,cAAM,IAAIJ,KAAJ,CAAUG,MAAM,CAAC,CAAD,CAAN,CAAUE,OAApB,CAAN;AACD;;AAEDb,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEA,IAAR;AAAcC,QAAAA,OAAO,EAAE,KAAvB;AAA8BC,QAAAA,KAAK,EAAE;AAArC,OAAD,CAAR;AACD,KAbD,CAaE,OAAOW,GAAP,EAAY;AACZd,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,OAAO,EAAE,KAAvB;AAA8BC,QAAAA,KAAK,EAAE;AAArC,OAAD,CAAR;AACAY,MAAAA,OAAO,CAACZ,KAAR,CAAcW,GAAd;AACD;AACF,GAlBD;;AAmBA,SAAO,CAACL,KAAD,EAAQV,KAAR,CAAP;AACD,CAnDM","sourcesContent":["import { useState, useReducer } from \"react\";\nimport { server } from \"./server\";\n\ninterface State<TData> {\n  data: TData | null;\n  loading: boolean;\n  error: boolean;\n}\n\ntype MutationTuple<TData, TVariables> = [\n  (variables?: TVariables | undefined) => Promise<void>,\n  State<TData>\n];\nexport const useMutation = <TData = any, TVariables = any>(query: string):MutationTuple<TData,TVariables> => {\n  const [state, setState] = useState<State<TData>>({\n    data: null,\n    loading: false,\n    error: false,\n  });\n\n  type Action<TData> =\n  | { type: \"FETCH\" }\n  | { type: \"FETCH_SUCCESS\"; payload: TData }\n  | { type: \"FETCH_ERROR\" };\n  \n  const reducer = <TData>() => (\n    state: State<TData>,\n    action: Action<TData>\n    \n  ): State<TData> => {\n    switch (action.type) {\n      case \"FETCH\":\n        return { ...state, loading: true };\n      case \"FETCH_SUCCESS\":\n        return { data: action.payload, loading: false, error: false };\n      case \"FETCH_ERROR\":\n        return { ...state, loading: false, error: true };\n  \n      default:\n        throw new Error();\n    }\n  };\n  \n\n  const fetch = async (variables?: TVariables) => {\n    try {\n      setState({ data: null, loading: true, error: false });\n\n      const { data, errors } = await server.fetch<TData, TVariables>({\n        query,\n        variables,\n      });\n\n      if (errors && errors.length) {\n        throw new Error(errors[0].message);\n      }\n\n      setState({ data: data, loading: false, error: false });\n    } catch (err) {\n      setState({ data: null, loading: false, error: true });\n      console.error(err);\n    }\n  };\n  return [fetch, state];\n};\n"]},"metadata":{},"sourceType":"module"}