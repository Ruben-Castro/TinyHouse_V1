{"ast":null,"code":"import { useState } from \"react\";\nimport { server } from \"./server\";\nexport const useMutation = query => {\n  const [state, setState] = useState({\n    data: null,\n    loading: false,\n    error: false\n  });\n\n  const fetch = async variables => {\n    try {\n      setState({\n        data: null,\n        loading: true,\n        error: false\n      });\n      const {\n        data,\n        errors\n      } = await server.fetch({\n        query,\n        variables\n      });\n\n      if (errors && errors.length) {\n        throw new Error(errors[0].message);\n      }\n\n      setState({\n        data: data,\n        loading: false,\n        error: false\n      });\n    } catch (err) {\n      setState({\n        data: null,\n        loading: false,\n        error: true\n      });\n      console.error(err);\n    }\n  };\n\n  return [fetch, state];\n};","map":{"version":3,"sources":["/Users/rubencastroespinoza/Development/Learning /TinyHouseV1/client/src/lib/api/useMutation.ts"],"names":["useState","server","useMutation","query","state","setState","data","loading","error","fetch","variables","errors","length","Error","message","err","console"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAYA,OAAO,MAAMC,WAAW,GAAmCC,KAAhC,IAAkF;AAC3G,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAe;AAC/CM,IAAAA,IAAI,EAAE,IADyC;AAE/CC,IAAAA,OAAO,EAAE,KAFsC;AAG/CC,IAAAA,KAAK,EAAE;AAHwC,GAAf,CAAlC;;AAMA,QAAMC,KAAK,GAAG,MAAOC,SAAP,IAAkC;AAC9C,QAAI;AACFL,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,OAAO,EAAE,IAAvB;AAA6BC,QAAAA,KAAK,EAAE;AAApC,OAAD,CAAR;AAEA,YAAM;AAAEF,QAAAA,IAAF;AAAQK,QAAAA;AAAR,UAAmB,MAAMV,MAAM,CAACQ,KAAP,CAAgC;AAC7DN,QAAAA,KAD6D;AAE7DO,QAAAA;AAF6D,OAAhC,CAA/B;;AAKA,UAAIC,MAAM,IAAIA,MAAM,CAACC,MAArB,EAA6B;AAC3B,cAAM,IAAIC,KAAJ,CAAUF,MAAM,CAAC,CAAD,CAAN,CAAUG,OAApB,CAAN;AACD;;AAEDT,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEA,IAAR;AAAcC,QAAAA,OAAO,EAAE,KAAvB;AAA8BC,QAAAA,KAAK,EAAE;AAArC,OAAD,CAAR;AACD,KAbD,CAaE,OAAOO,GAAP,EAAY;AACZV,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,OAAO,EAAE,KAAvB;AAA8BC,QAAAA,KAAK,EAAE;AAArC,OAAD,CAAR;AACAQ,MAAAA,OAAO,CAACR,KAAR,CAAcO,GAAd;AACD;AACF,GAlBD;;AAmBA,SAAO,CAACN,KAAD,EAAQL,KAAR,CAAP;AACD,CA3BM","sourcesContent":["import { useState } from \"react\";\nimport { server } from \"./server\";\n\ninterface State<TData> {\n  data: TData | null;\n  loading: boolean;\n  error: boolean;\n}\n\ntype MutationTuple<TData, TVariables> = [\n  (variables?: TVariables | undefined) => Promise<void>,\n  State<TData>\n];\nexport const useMutation = <TData = any, TVariables = any>(query: string):MutationTuple<TData,TVariables> => {\n  const [state, setState] = useState<State<TData>>({\n    data: null,\n    loading: false,\n    error: false,\n  });\n\n  const fetch = async (variables?: TVariables) => {\n    try {\n      setState({ data: null, loading: true, error: false });\n\n      const { data, errors } = await server.fetch<TData, TVariables>({\n        query,\n        variables,\n      });\n\n      if (errors && errors.length) {\n        throw new Error(errors[0].message);\n      }\n\n      setState({ data: data, loading: false, error: false });\n    } catch (err) {\n      setState({ data: null, loading: false, error: true });\n      console.error(err);\n    }\n  };\n  return [fetch, state];\n};\n"]},"metadata":{},"sourceType":"module"}