{"ast":null,"code":"import { useState, useEffect, useCallback } from \"react\";\nimport { server } from \"./server\";\nexport const useQuery = query => {\n  const [state, setState] = useState({\n    data: null,\n    loading: false,\n    error: false\n  });\n  const fetch = useCallback(() => {\n    const fetchApi = async () => {\n      try {\n        setState({\n          data: null,\n          loading: true,\n          error: false\n        });\n        const {\n          data,\n          errors\n        } = await server.fetch({\n          query\n        });\n\n        if (errors && errors.length) {\n          throw new Error(errors[0].message);\n        }\n\n        setState({\n          data,\n          loading: false,\n          error: false\n        });\n      } catch (err) {\n        setState({\n          data: null,\n          loading: false,\n          error: true\n        });\n        throw console.error(err);\n      }\n    };\n\n    fetchApi();\n  }, [query]);\n  useEffect(() => {\n    fetch();\n  }, [query, fetch]);\n  return { ...state,\n    refetch: fetch\n  };\n};","map":{"version":3,"sources":["/Users/rubencastroespinoza/Development/Learning /TinyHouseV1/client/src/lib/api/useQuery.ts"],"names":["useState","useEffect","useCallback","server","useQuery","query","state","setState","data","loading","error","fetch","fetchApi","errors","length","Error","message","err","console","refetch"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,MAAT,QAAuB,UAAvB;AAUA,OAAO,MAAMC,QAAQ,GAAiBC,KAAd,IAAoD;AAC1E,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAe;AAC/CQ,IAAAA,IAAI,EAAE,IADyC;AAE/CC,IAAAA,OAAO,EAAE,KAFsC;AAG/CC,IAAAA,KAAK,EAAE;AAHwC,GAAf,CAAlC;AAMA,QAAMC,KAAK,GAAGT,WAAW,CAAC,MAAM;AAC9B,UAAMU,QAAQ,GAAG,YAAY;AAC3B,UAAI;AACFL,QAAAA,QAAQ,CAAC;AAAEC,UAAAA,IAAI,EAAE,IAAR;AAAcC,UAAAA,OAAO,EAAE,IAAvB;AAA6BC,UAAAA,KAAK,EAAE;AAApC,SAAD,CAAR;AACA,cAAM;AAAEF,UAAAA,IAAF;AAAQK,UAAAA;AAAR,YAAmB,MAAMV,MAAM,CAACQ,KAAP,CAAoB;AAAEN,UAAAA;AAAF,SAApB,CAA/B;;AAEA,YAAIQ,MAAM,IAAIA,MAAM,CAACC,MAArB,EAA6B;AAC3B,gBAAM,IAAIC,KAAJ,CAAUF,MAAM,CAAC,CAAD,CAAN,CAAUG,OAApB,CAAN;AACD;;AACDT,QAAAA,QAAQ,CAAC;AAAEC,UAAAA,IAAF;AAAQC,UAAAA,OAAO,EAAE,KAAjB;AAAwBC,UAAAA,KAAK,EAAE;AAA/B,SAAD,CAAR;AACD,OARD,CAQE,OAAOO,GAAP,EAAY;AACZV,QAAAA,QAAQ,CAAC;AAAEC,UAAAA,IAAI,EAAE,IAAR;AAAcC,UAAAA,OAAO,EAAE,KAAvB;AAA8BC,UAAAA,KAAK,EAAE;AAArC,SAAD,CAAR;AACA,cAAMQ,OAAO,CAACR,KAAR,CAAcO,GAAd,CAAN;AACD;AACF,KAbD;;AAeAL,IAAAA,QAAQ;AACT,GAjBwB,EAiBtB,CAACP,KAAD,CAjBsB,CAAzB;AAmBAJ,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,KAAK;AACN,GAFQ,EAEN,CAACN,KAAD,EAAQM,KAAR,CAFM,CAAT;AAIA,SAAO,EAAE,GAAGL,KAAL;AAAYa,IAAAA,OAAO,EAAER;AAArB,GAAP;AACD,CA/BM","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { server } from \"./server\";\n\ninterface State<TData> {\n  data: TData | null;\n  loading: boolean;\n  error: boolean;\n}\ninterface QueryResult<TData> extends State<TData> {\n  refetch: () => void;\n}\nexport const useQuery = <TData = any>(query: string): QueryResult<TData> => {\n  const [state, setState] = useState<State<TData>>({\n    data: null,\n    loading: false,\n    error: false,\n  });\n\n  const fetch = useCallback(() => {\n    const fetchApi = async () => {\n      try {\n        setState({ data: null, loading: true, error: false });\n        const { data, errors } = await server.fetch<TData>({ query });\n\n        if (errors && errors.length) {\n          throw new Error(errors[0].message);\n        }\n        setState({ data, loading: false, error: false });\n      } catch (err) {\n        setState({ data: null, loading: false, error: true });\n        throw console.error(err);\n      }\n    };\n\n    fetchApi();\n  }, [query]);\n\n  useEffect(() => {\n    fetch();\n  }, [query, fetch]);\n\n  return { ...state, refetch: fetch };\n};\n"]},"metadata":{},"sourceType":"module"}