{"ast":null,"code":"import { useState, useEffect, useCallback } from \"react\";\nimport { server } from \"./server\";\nexport const useQuery = query => {\n  const [state, setState] = useState({\n    data: null,\n    loading: false\n  });\n  const fetch = useCallback(() => {\n    setState({\n      data: null,\n      loading: true\n    });\n\n    const fetchApi = async () => {\n      const {\n        data\n      } = await server.fetch({\n        query\n      });\n      setState({\n        data,\n        loading: false\n      });\n    };\n\n    fetchApi();\n  }, [query]);\n  useEffect(() => {\n    fetch();\n  }, [query, fetch]);\n  return { ...state,\n    refetch: fetch\n  };\n};","map":{"version":3,"sources":["/Users/rubencastroespinoza/Development/Learning /TinyHouseV1/client/src/lib/api/useQuery.ts"],"names":["useState","useEffect","useCallback","server","useQuery","query","state","setState","data","loading","fetch","fetchApi","refetch"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,MAAT,QAAuB,UAAvB;AAOA,OAAO,MAAMC,QAAQ,GAAiBC,KAAd,IAAgC;AACtD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAe;AAC/CQ,IAAAA,IAAI,EAAE,IADyC;AAE/CC,IAAAA,OAAO,EAAC;AAFuC,GAAf,CAAlC;AAKA,QAAMC,KAAK,GAAGR,WAAW,CAAC,MAAM;AAE9BK,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE,IAAP;AAAaC,MAAAA,OAAO,EAAC;AAArB,KAAD,CAAR;;AAEA,UAAME,QAAQ,GAAG,YAAY;AAC3B,YAAM;AAAEH,QAAAA;AAAF,UAAW,MAAML,MAAM,CAACO,KAAP,CAAoB;AAAEL,QAAAA;AAAF,OAApB,CAAvB;AACAE,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAF;AAAQC,QAAAA,OAAO,EAAC;AAAhB,OAAD,CAAR;AACD,KAHD;;AAKAE,IAAAA,QAAQ;AACT,GAVwB,EAUtB,CAACN,KAAD,CAVsB,CAAzB;AAYAJ,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,KAAK;AACN,GAFQ,EAEN,CAACL,KAAD,EAAQK,KAAR,CAFM,CAAT;AAIA,SAAO,EAAC,GAAGJ,KAAJ;AAAWM,IAAAA,OAAO,EAACF;AAAnB,GAAP;AACD,CAvBM","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { server } from \"./server\";\n\ninterface State<TData> {\n  data: TData | null;\n  loading: boolean;\n}\n\nexport const useQuery = <TData = any>(query: string) => {\n  const [state, setState] = useState<State<TData>>({\n    data: null,\n    loading:false\n  });\n\n  const fetch = useCallback(() => {\n\n    setState({data: null, loading:true})\n\n    const fetchApi = async () => {\n      const { data } = await server.fetch<TData>({ query });\n      setState({ data, loading:false});\n    };\n\n    fetchApi();\n  }, [query]);\n\n  useEffect(() => {\n    fetch();\n  }, [query, fetch]);\n\n  return {...state, refetch:fetch};\n};\n"]},"metadata":{},"sourceType":"module"}