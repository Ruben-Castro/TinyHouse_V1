{"ast":null,"code":"import { useEffect, useReducer, useCallback } from \"react\";\nimport { server } from \"./server\";\n\nconst reducer = () => (state, action) => {\n  switch (action.type) {\n    case \"FETCH\":\n      return { ...state,\n        loading: true\n      };\n\n    case \"FETCH_SUCCESS\":\n      return {\n        data: action.payload,\n        loading: false,\n        error: false\n      };\n\n    case \"FETCH_ERROR\":\n      return { ...state,\n        loading: false,\n        error: true\n      };\n\n    default:\n      throw new Error();\n  }\n};\n\nexport const useQuery = query => {\n  const fetchReducer = reducer();\n  const [state, dispatch] = useReducer(fetchReducer, {\n    data: null,\n    loading: false,\n    error: false\n  });\n  const fetch = useCallback(() => {\n    const fetchApi = async () => {\n      try {\n        dispatch({\n          type: 'FETCH'\n        });\n        const {\n          data,\n          errors\n        } = await server.fetch({\n          query\n        });\n\n        if (errors && errors.length) {\n          throw new Error(errors[0].message);\n        }\n\n        dispatch({\n          type: \"FETCH_SUCCESS\",\n          payload: data\n        });\n      } catch (err) {\n        dispatch({\n          type: \"FETCH_ERROR\"\n        });\n        throw console.error(err);\n      }\n    };\n\n    fetchApi();\n  }, [query]);\n  useEffect(() => {\n    fetch();\n  }, [query, fetch]);\n  return { ...state,\n    refetch: fetch\n  };\n};","map":{"version":3,"sources":["/Users/rubencastroespinoza/Development/Learning /TinyHouseV1/client/src/lib/api/useQuery.ts"],"names":["useEffect","useReducer","useCallback","server","reducer","state","action","type","loading","data","payload","error","Error","useQuery","query","fetchReducer","dispatch","fetch","fetchApi","errors","length","message","err","console","refetch"],"mappings":"AAAA,SAAmBA,SAAnB,EAA8BC,UAA9B,EAA0CC,WAA1C,QAA6D,OAA7D;AACA,SAASC,MAAT,QAAuB,UAAvB;;AAcA,MAAMC,OAAO,GAAG,MAAY,CAC1BC,KAD0B,EAE1BC,MAF0B,KAGT;AACjB,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,OAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAYG,QAAAA,OAAO,EAAE;AAArB,OAAP;;AACF,SAAK,eAAL;AACE,aAAO;AAAEC,QAAAA,IAAI,EAAEH,MAAM,CAACI,OAAf;AAAwBF,QAAAA,OAAO,EAAE,KAAjC;AAAwCG,QAAAA,KAAK,EAAE;AAA/C,OAAP;;AACF,SAAK,aAAL;AACE,aAAO,EAAE,GAAGN,KAAL;AAAYG,QAAAA,OAAO,EAAE,KAArB;AAA4BG,QAAAA,KAAK,EAAE;AAAnC,OAAP;;AAEF;AACE,YAAM,IAAIC,KAAJ,EAAN;AATJ;AAaD,CAjBD;;AAkBA,OAAO,MAAMC,QAAQ,GAAiBC,KAAd,IAAoD;AAC1E,QAAMC,YAAY,GAAGX,OAAO,EAA5B;AACA,QAAM,CAACC,KAAD,EAAQW,QAAR,IAAoBf,UAAU,CAACc,YAAD,EAAc;AAChDN,IAAAA,IAAI,EAAE,IAD0C;AAEhDD,IAAAA,OAAO,EAAE,KAFuC;AAGhDG,IAAAA,KAAK,EAAE;AAHyC,GAAd,CAApC;AAOA,QAAMM,KAAK,GAAGf,WAAW,CAAC,MAAM;AAC9B,UAAMgB,QAAQ,GAAG,YAAY;AAC3B,UAAI;AACFF,QAAAA,QAAQ,CAAC;AAACT,UAAAA,IAAI,EAAE;AAAP,SAAD,CAAR;AACA,cAAM;AAAEE,UAAAA,IAAF;AAAQU,UAAAA;AAAR,YAAmB,MAAMhB,MAAM,CAACc,KAAP,CAAoB;AAAEH,UAAAA;AAAF,SAApB,CAA/B;;AAEA,YAAIK,MAAM,IAAIA,MAAM,CAACC,MAArB,EAA6B;AAC3B,gBAAM,IAAIR,KAAJ,CAAUO,MAAM,CAAC,CAAD,CAAN,CAAUE,OAApB,CAAN;AACD;;AACDL,QAAAA,QAAQ,CAAC;AAACT,UAAAA,IAAI,EAAC,eAAN;AAAuBG,UAAAA,OAAO,EAACD;AAA/B,SAAD,CAAR;AACD,OARD,CAQE,OAAOa,GAAP,EAAY;AACZN,QAAAA,QAAQ,CAAC;AAACT,UAAAA,IAAI,EAAC;AAAN,SAAD,CAAR;AACA,cAAMgB,OAAO,CAACZ,KAAR,CAAcW,GAAd,CAAN;AACD;AACF,KAbD;;AAeAJ,IAAAA,QAAQ;AACT,GAjBwB,EAiBtB,CAACJ,KAAD,CAjBsB,CAAzB;AAmBAd,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,KAAK;AACN,GAFQ,EAEN,CAACH,KAAD,EAAQG,KAAR,CAFM,CAAT;AAIA,SAAO,EAAE,GAAGZ,KAAL;AAAYmB,IAAAA,OAAO,EAAEP;AAArB,GAAP;AACD,CAjCM","sourcesContent":["import { useState, useEffect, useReducer, useCallback } from \"react\";\nimport { server } from \"./server\";\n\ninterface State<TData> {\n  data: TData | null;\n  loading: boolean;\n  error: boolean;\n}\ninterface QueryResult<TData> extends State<TData> {\n  refetch: () => void;\n}\ntype Action<TData> =\n  | { type: \"FETCH\" }\n  | { type: \"FETCH_SUCCESS\"; payload: TData }\n  | { type: \"FETCH_ERROR\" };\nconst reducer = <TData>() =>(\n  state: State<TData>,\n  action: Action<TData>\n): State<TData> => {\n  switch (action.type) {\n    case \"FETCH\":\n      return { ...state, loading: true };\n    case \"FETCH_SUCCESS\":\n      return { data: action.payload, loading: false, error: false };\n    case \"FETCH_ERROR\":\n      return { ...state, loading: false, error: true };\n\n    default:\n      throw new Error();\n  }\n\n\n};\nexport const useQuery = <TData = any>(query: string): QueryResult<TData> => {\n  const fetchReducer = reducer<TData>();\n  const [state, dispatch] = useReducer(fetchReducer,{\n    data: null,\n    loading: false,\n    error: false,\n  });\n  \n\n  const fetch = useCallback(() => {\n    const fetchApi = async () => {\n      try {\n        dispatch({type: 'FETCH'});\n        const { data, errors } = await server.fetch<TData>({ query });\n\n        if (errors && errors.length) {\n          throw new Error(errors[0].message);\n        }\n        dispatch({type:\"FETCH_SUCCESS\", payload:data});\n      } catch (err) {\n        dispatch({type:\"FETCH_ERROR\"});\n        throw console.error(err);\n      }\n    };\n\n    fetchApi();\n  }, [query]);\n\n  useEffect(() => {\n    fetch();\n  }, [query, fetch]);\n\n  return { ...state, refetch: fetch };\n};\n"]},"metadata":{},"sourceType":"module"}